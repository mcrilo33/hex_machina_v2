[tool.poetry]
name = "hex-machina-v2"
version = "0.1.0"
description = "AI-driven newsletter service that automatically monitors AI research and delivers concise summaries"
authors = ["Mathieu Crilout <mathieu.crilout@gmail.com>"]
readme = "README.md"
packages = [{include = "hex_machina", from = "src"}]
keywords = ["ai", "newsletter", "research", "automation", "nlp"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

[tool.poetry.dependencies]
python = "^3.10"
pydantic = "^2.5.0"
pydantic-settings = "^2.1.0"
sqlalchemy = "^2.0.23"
langchain = "^0.1.20"
langchain-openai = "^0.0.5"
langchain-community = "^0.0.20"
langgraph = "^0.0.20"
langsmith = "^0.1.17"
transformers = "^4.36.0"
pandas = "^2.1.4"
numpy = "^1.25.2"
matplotlib = "^3.8.2"
prefect = "^2.14.0"
beautifulsoup4 = "^4.12.2"
feedparser = "^6.0.10"
python-dotenv = "^1.0.0"

[tool.poetry.group.dev.dependencies]
pytest = "^7.4.3"
pytest-asyncio = "^0.21.1"
pytest-cov = "^4.1.0"
pytest-mock = "^3.12.0"
black = "^23.11.0"
ruff = "^0.1.6"
pre-commit = "^3.6.0"
bandit = "^1.7.5"
safety = "^2.3.5"

[tool.poetry.group.docs.dependencies]
mkdocs = "^1.5.3"
mkdocs-material = "^9.4.8"
mkdocstrings = {extras = ["python"], version = "^0.24.0"}

[tool.poetry.scripts]
hex-machina = "hex_machina.main:main"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
target-version = "py310"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.black]
target-version = ['py310']
line-length = 88
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["hex_machina"]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "langchain.*",
    "langchain_openai.*",
    "langchain_community.*",
    "langgraph.*",
    "langsmith.*",
    "transformers.*",
    "torch.*",
    "celery.*",
    "redis.*",
    "prefect.*",
    "httpx.*",
    "beautifulsoup4.*",
    "feedparser.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["src/tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=src/hex_machina",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=80",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["src/hex_machina"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.bandit]
exclude_dirs = ["tests", "src/tests"]
skips = ["B101", "B601"]

[tool.safety]
output = "json" 